package com.jwt.jwt.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.jwt.jwt.enumeration.Role;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;
import java.util.*;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @Column(unique = true, nullable = false)
    @NotBlank(message = "Username cannot be blank")
    @Size(min=5, max=12, message = "Your username must be at least 5 characters")
    @Pattern(regexp="^[a-zA-Z0-9]{5,12}$",
                message = "Your username be 5-12 characters long and contains only characters and numbers")
    private String username;

    @Column(unique = true,nullable = false)
    @NotBlank(message = "{email.blank}")
    @Pattern(regexp = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                message= "{email.pattern}")
    @JsonIgnore
    private String email;

    @Column(nullable = false)
    @JsonIgnore // To prevent accidental leaks of password in APIs
    @NotBlank(message = "Password cannot be blank")
    private String password;

    @ElementCollection(fetch = FetchType.EAGER)
    @Enumerated(EnumType.STRING)
    @CollectionTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"))
    @Column(name = "role")
    @Size(min=1, message = "At least one role is required")
    @Getter // we exclude the roles set from the lombok autogenerated getters, setter unless the overriden ones
    private final Set<Role> roles = new HashSet<>();
    @CreationTimestamp
    private LocalDateTime createdAt;
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    public Set<Role> getRoles() {
        return Collections.unmodifiableSet(roles);
    }

    public void addRole(Role role){
        this.roles.add(role);
    }
}
